//---------------------------------------------------------------------------
#pragma hdrstop

#include "Object.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------
Object::Object(void)
{
        // Конструктор класса без параметров
        // Инициализация переменных
pD3DDevice = NULL;
Visible = false;
Checkable = false;
BasePath = GetCurrentDir()+"\\Data\\";
}
//---------------------------------------------------------------------------
Object::~Object()
{
        // Деструктор класса
//TStringList* t = new TStringList();
//t->Add("Object");
//t->SaveToFile("END.txt");
//delete t;
}
//---------------------------------------------------------------------------
//                      ФУНКЦИИ, ОБЩИЕ ДЛЯ ВСЕХ ОБЪЕКТОВ
//---------------------------------------------------------------------------
bool Object::SetRenderDevice(LPDIRECT3DDEVICE8 Device)
{
        // Назначение устройства рендеринга
if(Device!=NULL) {
        pD3DDevice = Device;
        return true;
        }
else {
        return false;
        }
}
//---------------------------------------------------------------------------
bool Object::SetFrustum(FrustumPiramide* Frustum)
{
        // Установка указателя на пирамиду видимости. Если pFrustum остался
        // равен NULL - считаем, что пирамида видимости = всей сцене
pFrustum = Frustum;
return true;
}
//---------------------------------------------------------------------------
//        ВИРТУАЛЬНЫЕ ФУНКЦИИ (ПЕРЕОПРЕДЕЛЯЕМЫЕ В КЛАССАХ-НАСЛЕДНИКАХ)
//---------------------------------------------------------------------------
bool Object::Reset()
{
        // Сбросить объект (нужно для некоторых объектов при пересоздании
        // устройства рендеринга)
return true;
}
//---------------------------------------------------------------------------
bool Object::Restore()
{
        // Восстановление объекта, если он по каким-либо причинам был поврежден
return true;
}
//---------------------------------------------------------------------------
bool Object::UpdateAnimation()
{
        // Пересчитать анимацию объекта
return true;
}
//---------------------------------------------------------------------------

