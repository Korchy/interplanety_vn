//---------------------------------------------------------------------------
#ifndef CameraH
#define CameraH
//---------------------------------------------------------------------------
#include <Classes.hpp>  // Для использования стандартных С++ - типов данных (типа AnsiString)
#include "d3dx8.h"      // Подключение библиотеки D3D8X для использования ее функций
#include "FrustumPiramide.h"    // Пирамида видимости
#include "ObjectSkyBox.h"       // Для управления объектом SkyBox
//---------------------------------------------------------------------------
// Класс Camera. Описывает текщее положение камеры и приводит мировую камеру
// к этому положению. Текущая камера создается как некий абстрактный объект в
// пространстве, имеющий положение и направление взгляда. К нему приводится
// мировая камера сцены. При скроллинге меняется положение абстрактной камеры и
// мировая камера снова приводится к нему.
//---------------------------------------------------------------------------
class Camera
{

protected:
        // Доступно только потомкам
        // Переменные
        LPDIRECT3DDEVICE8 pD3DDevice;   // Устройство рендеринга (для согласования мировой камеры с данной)

private:
        // Доступно только этому классу
        // Переменные
        // Камера задается 6 векторами: 3 стандартных вектора, описывающих положение камеры
        D3DXVECTOR3 Position;   // Положение
	D3DXVECTOR3 Target;     // Направление взгляда
	D3DXVECTOR3 Up;         // Верхний вектор (ориентация)
        // и 3 единичными векторами, обеспечивающими направления скроллирования
        D3DXVECTOR3 VecX;       // Вдоль оси Х
        D3DXVECTOR3 VecY;       // Вдоль оси Y
        D3DXVECTOR3 VecZ;       // Вдоль оси Z

        float ScrollSpeed;      // Скорость движения камеры (ед./мс.) Оптимально при FPS=1000 (1 кадр отрабатывается за 1 мс.) ScrollSpeed = 0.1, следовательно для корректровки скорости нужно каждый кадр ставить ScrollSpeed = 0.1 * время отработки кадра

        D3DXMATRIX TransformMatrix;     // Матрица трансформации, собирает (суммирует) в себе все изменения положения камеры до выполнения UpdateWorld

        ObjectSkyBox* SkyBox;   // Указатель на SkyBox

        // Функции
        bool MoveTo(float X, float Y, float Z); // Перемещение камеры в точку с координатами X,Y,Z
        bool UpdateFrustum();   // Пересчитать параметры пирамиды видимости для камеры

public:
        // Доступно всем
        Camera(void);   // Констуктор класса без параметров
        ~Camera();      // Деструктор класса

        // Переменные
        FrustumPiramide* Frustum;       // Пирамида видимости для камеры

        // Функции
        bool SetRenderDevice(LPDIRECT3DDEVICE8 Device); // Назначение устройства рендеринга
        bool SetSkyBox(ObjectSkyBox* SkyBoxObject);     // Назначение объекта SkySphere (фон)
        void SetScrollSpeed(float NewSpeed);    // Установка скорости скроллинга

        D3DXVECTOR3 GetPosition();      // Возвращает текущее положение камеры
        bool ScrollRight();             // Перемешение камеры вдоль оси Х вправо
        bool ScrollLeft();              // Перемешение камеры вдоль оси Х влево
        bool ScrollUp();                // Перемешение камеры вдоль оси Y вверх
        bool ScrollDown();              // Перемешение камеры вдоль оси Y вниз
        bool Scale(bool Increase);      // Перемешение камеры вдоль оси Z, Increace==true - увеличить масштаб, false - уменьшить масштаб
        bool RotateRight();             // Поворот камеры вокруг оси Y направо
        bool RotateLeft();              // Поворот камеры вокруг оси Y налево
        bool RotateUp();                // Поворот камеры вокруг оси Х вверх
        bool RotateDown();              // Поворот камеры вокруг оси Х вниз
        bool RotateRightOrtho();        // Поворот камеры вокруг оси Y направо в ортогональной проекции
        bool RotateLeftOrtho();         // Поворот камеры вокруг оси Y налево в ортогональной проекции
        bool RotateUpOrtho();           // Поворот камеры вокруг оси Х вверх в ортогональной проекции
        bool RotateDownOrtho();         // Поворот камеры вокруг оси Х вниз в ортогональной проекции
        bool UpdateWorld();             // Переместить мировую камеру к текущей
        bool DefaultPosition();         // Установка камеры в начальное положение

};
//---------------------------------------------------------------------------
#endif
