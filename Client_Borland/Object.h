//---------------------------------------------------------------------------
#ifndef ObjectH
#define ObjectH
//---------------------------------------------------------------------------
#include <Classes.hpp>          // Для использования стандартных С++ - типов данных (типа AnsiString)
#include "d3dx8.h"              // Подключение библиотеки D3D8X для использования ее функций
#include "FrustumPiramide.h"    // Для использования пирамиды видимости
//---------------------------------------------------------------------------
// Класс Object. Общий абстрактный класс для создания на своей основе объектов
// игры.
//---------------------------------------------------------------------------
class Object
{
protected:
        // Доступно только потомкам
        // Переменные
        LPDIRECT3DDEVICE8 pD3DDevice;   // Устройство рендеринга с помощью которого можно выводить объекты на экран
        FrustumPiramide* pFrustum;      // Указатель на пирамиду видимости для проверки видимости объекта камерой. Если pFrustum = NULL - считаем, что объект всегда виден. Сама пирамида видимости создается и пересчитывается в камере.

private:
        // Доступно только этому классу
        // Переменные

public:
        // Доступно всем
        Object(void);                           // Констуктор класса без параметров
        virtual ~Object();                      // Деструктор класса

        // Переменные
        bool Visible;           // true - объект "видимый" т.е. должен рендериться на экран, false - рендерить его ненужно т.к. он и так "невидимый"
        bool Checkable;         // true - объект можно "выбирать" т.е. он должен реагировать на действия мышкой, false - объект невыбираемый

        AnsiString BasePath;    // Базовая часть пути к файлам с ресурсами объектов

        // Функции
        bool SetRenderDevice(LPDIRECT3DDEVICE8 Device); // Назначение устройства рендеринга
        bool SetFrustum(FrustumPiramide* Frustum);      // Установка указателя на пирамиду видимости

        virtual bool Reset();                   // Сбросить объект (нужно для некоторых объектов при пересоздании устройства рендеринга)
        virtual bool Restore();                 // Восстановление объекта после того, как он был сброшен

        virtual bool UpdateAnimation();         // Пересчитать анимацию объекта

        virtual bool Draw()=0;                  // Вывод объекта в сцену

};
//---------------------------------------------------------------------------
#endif
