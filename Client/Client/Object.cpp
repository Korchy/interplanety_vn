//---------------------------------------------------------------------------
#pragma hdrstop
//---------------------------------------------------------------------------
#include "StdAfx.h"
#include "Object.h"
//---------------------------------------------------------------------------
Object::Object(void)
{
	// Конструктор класса
pD3DDevice = NULL;
Visible = false;
Checkable = false;
Focused = false;
char Path[100];
GetCurrentDirectory(100,Path);
BasePath = std::string(Path)+"\\Data\\";
}
//---------------------------------------------------------------------------
Object::~Object(void)
{
	// Деструктор класса

}
//---------------------------------------------------------------------------
bool Object::SetRenderDevice(LPDIRECT3DDEVICE8 Device)
{
	// Назначение устройства рендеринга
if(Device!=NULL) {
	pD3DDevice = Device;
	return true;
}
else return false;
}
//---------------------------------------------------------------------------
bool Object::SetFrustum(FrustumPiramide* Frustum)
{
	// Установка указателя на пирамиду видимости. Если pFrustum остался
	// равен NULL - считаем, что пирамида видимости = всей сцене (все объекты
	// нужно отрисовывать)
pFrustum = Frustum;
return true;
}
//---------------------------------------------------------------------------
//        ВИРТУАЛЬНЫЕ ФУНКЦИИ (ПЕРЕОПРЕДЕЛЯЕМЫЕ В КЛАССАХ-НАСЛЕДНИКАХ)
//---------------------------------------------------------------------------
bool Object::Reset()
{
	// Сбросить объект (нужно для некоторых объектов при пересоздании
	// устройства рендеринга)
return true;
}
//---------------------------------------------------------------------------
bool Object::Restore()
{
	// Восстановление объекта, если он по каким-либо причинам был поврежден
return true;
}
//---------------------------------------------------------------------------
bool Object::KeyPress(char Key,char Params)
{
	// Обработка нажатия текстовых клавиш на клавиатуре
return true;
}
//---------------------------------------------------------------------------
bool Object::SystemKeyPress(char Key,char Params)
{
	// Обработка нажатия системныъ клавиш на клавиатуре
return true;
}
//---------------------------------------------------------------------------
/*
bool Object::UpdateAnimation()
{
	// Пересчитать анимацию объекта
return true;
}
*/
//---------------------------------------------------------------------------