#pragma once
//---------------------------------------------------------------------------
#ifndef FpsCounterH
#define FpsCounterH
//---------------------------------------------------------------------------
// Класс FpsCounter - счетчик скорости работы программы. Считает время,
// затраченное на один игровой цикл в кадр/сек (FPS). Для работы нужно в
// цикле при отрисовке каждого нового кадра вызывать NextFrame()
//---------------------------------------------------------------------------
#include "Common.h"		// Доп. функции
#include "Text.h"		// Для организации вывода на экран значения FPS
//---------------------------------------------------------------------------
class FpsCounter
{
private:	// Только для этого класса

	// Переменные
	unsigned short Fps;			// Текщее значение FPS
	double FramesDiff;			// Время в мс. за которое была обработана предыдущая интерация игрового цикла 

	Text* FpsShower;			// Объект ObjectText для вывода значения FPS на экран

	LARGE_INTEGER QPFrequency;		// Частота высокоточного счетчика
	LARGE_INTEGER QPCounter;		// Текущее значение высокоточного счетчика
	LARGE_INTEGER QPCounterLast;	// Предыдущее значение высокоточного счетчика для подсчета FPS (меняется 1 раз в секунду)
	LARGE_INTEGER QPCounterLast1;	// Предыдущее значение высокоточного счетчика для подсчета времени обработки одной интерации игрового цикла (меняется каждую интерацию цикла)        
	unsigned int Frames;			// Количество кадров, набирающееся за секунду времени

protected:	// Для этого класса и потомков

public:		// Доступно всем
	FpsCounter(void);	// Конструктор
	~FpsCounter(void);	// Деструктор
	
	// Переменные
	bool ShowFps;		// Выводить-ли значения FPS на экран

	// Функции
	bool NextFrame();		// Функция, подсчитывающая новое значение FPS
	bool SetFpsShow(LPDIRECT3DDEVICE8 Device,int Left,int Top);	// Инициализация вывода значения FPS на экран
	bool Draw();			// Вывод значения FPS в сцену
	bool Reset();			// Сбросить объект (при переинициализации устройства рендеринга)
	bool Restore();			// Восстановить объект после того, как он был сброшен
	unsigned short GetFps();	// Возвращает текущее значение FPS
	double GetFramesDiff();		// Возвращает время, за которое была обработана предыдущая интерация игрового цикла
	float GetCorrectionValue();	// Возвращает текущее значение коэффициента коррекции

};
#endif