#pragma once
//---------------------------------------------------------------------------
#ifndef ObjectH
#define ObjectH
//---------------------------------------------------------------------------
// Класс Object. Общий абстрактный класс для создания на своей основе объектов
// игры.
//---------------------------------------------------------------------------
#include <string>				// Для использования std::string
#include "FrustumPiramide.h"	// Для использования пирамиды видимости
//---------------------------------------------------------------------------
class Object
{
private:	// Только для этого класса

protected:	// Для этого класса и потомков
	// Переменные
	LPDIRECT3DDEVICE8 pD3DDevice;	// Устройство рендеринга с помощью которого можно выводить объекты на экран
	FrustumPiramide* pFrustum;		// Указатель на пирамиду видимости для проверки видимости объекта камерой. Если pFrustum = NULL - считаем, что объект всегда виден. Сама пирамида видимости создается и пересчитывается в камере.

public:		// Доступно всем
	Object(void);			// Конструктор
	virtual ~Object(void);	// Деструктор
	
	// Переменные
	bool Visible;			// true - объект "видимый" т.е. должен рендериться на экран, false - рендерить его ненужно т.к. он и так "невидимый"
	bool Checkable;			// true - объект можно "выбирать" т.е. он должен реагировать на действия мышкой, false - объект невыбираемый
	bool Focused;			// true - объект в фокусе (активен в данный момент), false - не в фокусе

	std::string BasePath;	// Базовая часть пути к файлам с ресурсами объектов

	// Функции
	bool SetRenderDevice(LPDIRECT3DDEVICE8 Device);	// Назначение устройства рендеринга
	bool SetFrustum(FrustumPiramide* Frustum);		// Установка указателя на пирамиду видимости

	virtual bool Reset();		// Сбросить объект (нужно для некоторых объектов при пересоздании устройства рендеринга)
	virtual bool Restore();		// Восстановление объекта после того, как он был сброшен

//	virtual bool UpdateAnimation();		// Пересчитать анимацию объекта

	virtual bool Draw()=0;				// Вывод объекта в сцену

	virtual bool KeyPress(char Key,char Params);	// Обработка нажатия текстовых клавиш на клавиатуре
	virtual bool SystemKeyPress(char Key,char Params);	// Обработка нажатия системных клавиш на клавиатуре
};
#endif